# -= Создание классов и экземпляров

# При выполнении инструкция class создается объект класса.
class EmptyClass:
    pass

# Вместо pass в Python 3 можно использовать троеточие
# (pass — инструкция пустой операции)
class EmptyClass2:
    ...

class SomeObject:
    # Операции присваивания внутри инструкции class создают атрибуты класса
    a = 1
    b = 2

    # Инструкции def, вложенные в инструкцию class, создают методы класса.
    # Первый аргумент метода self автоматически ссылается на экземпляр объекта
    # self - общепринятое название атрибута по соглашению
    def print_sum(self):
        print (self.a + self.b)

    # Операции присваивания значений атрибутам через ссылку self в методах 
    # создают атрибуты в каждом отдельном экземпляре.
    def set_c(self, c):
        self.c = c

# Всякий раз, когда вызывается класс, создается и возвращается 
# новый объект экземпляра.
obj = SomeObject()
print (obj.a)
obj.print_sum() 
# при вызове ветода obj автоматически попадет в print_sum как self

# Каждый объект экземпляра наследует атрибуты класса и приобретает 
# свое собственное пространство имен.
obj2 = SomeObject()
obj2.a = 3
obj2.print_sum()

# Операции присваивания значений атрибутам через ссылку self в методах 
# создают атрибуты в каждом отдельном экземпляре.
obj2.set_c(10)
print(obj2.c)
# print(obj.c) # вызовет ошибку, тк у obj не установлен атрибут c

# можно создавать новые атрибуты в пространстве имен экземпляра, присваивая
# значения именам за пределами методов класса
obj2.d = 'some text'


# -= Наследование =-

# Суперклассы перечисляются в круглых скобках в заголовке инструкции class.
# Наследующий класс называется подклассом, а наследуемый класс 
# называется его супер-классом. 
class NewObject(SomeObject):
    b = 100.1
    def print_sum(self):
        print (self.a + self.b + self.c)

# Классы наследуют атрибуты своих суперклассов.
print(NewObject.a)
print(NewObject.b)

# Экземпляры наследуют атрибуты всех доступных классов.
# Во время поиска имен интерпретатор проверяет сначала экземпляр, 
# потом его класс, а потом все суперклассы.
obj3 = NewObject()
obj3.c = 33
print (obj3.a, obj3.b, obj3.c)

obj3.set_c(44)
obj3.print_sum()


# Конструктор

class NewObject2(SomeObject):
    x = 1
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    def __str__(self):
        return ('[Объект класса NewObject: a=%s, b=%s, c=%s]' 
                % (self.a, self.b, self.c))

obj4 = NewObject2(1,2,3)
print(obj4)
